// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store is a generated GoMock package.
package store

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockItem is a mock of Item interface.
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem.
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance.
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// Head mocks base method.
func (m *MockItem) Head() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Head indicates an expected call of Head.
func (mr *MockItemMockRecorder) Head() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockItem)(nil).Head))
}

// Reader mocks base method.
func (m *MockItem) Reader() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Reader indicates an expected call of Reader.
func (mr *MockItemMockRecorder) Reader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockItem)(nil).Reader))
}

// Size mocks base method.
func (m *MockItem) Size() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockItemMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockItem)(nil).Size))
}

// Writer mocks base method.
func (m *MockItem) Writer() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Writer indicates an expected call of Writer.
func (mr *MockItemMockRecorder) Writer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockItem)(nil).Writer))
}

// MockChunk is a mock of Chunk interface.
type MockChunk struct {
	ctrl     *gomock.Controller
	recorder *MockChunkMockRecorder
}

// MockChunkMockRecorder is the mock recorder for MockChunk.
type MockChunkMockRecorder struct {
	mock *MockChunk
}

// NewMockChunk creates a new mock instance.
func NewMockChunk(ctrl *gomock.Controller) *MockChunk {
	mock := &MockChunk{ctrl: ctrl}
	mock.recorder = &MockChunkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChunk) EXPECT() *MockChunkMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockChunk) Add(item Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockChunkMockRecorder) Add(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockChunk)(nil).Add), item)
}

// At mocks base method.
func (m *MockChunk) At(idx int) (Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "At", idx)
	ret0, _ := ret[0].(Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// At indicates an expected call of At.
func (mr *MockChunkMockRecorder) At(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "At", reflect.TypeOf((*MockChunk)(nil).At), idx)
}

// Del mocks base method.
func (m *MockChunk) Del(idx int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockChunkMockRecorder) Del(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockChunk)(nil).Del), idx)
}

// Set mocks base method.
func (m *MockChunk) Set(idx int, item Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", idx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockChunkMockRecorder) Set(idx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockChunk)(nil).Set), idx, item)
}

// Total mocks base method.
func (m *MockChunk) Total() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Total")
	ret0, _ := ret[0].(int)
	return ret0
}

// Total indicates an expected call of Total.
func (mr *MockChunkMockRecorder) Total() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Total", reflect.TypeOf((*MockChunk)(nil).Total))
}
