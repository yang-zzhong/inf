// Code generated by MockGen. DO NOT EDIT.
// Source: block.go

// Package inf is a generated GoMock package.
package inf

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBlockStore is a mock of BlockStore interface.
type MockBlockStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStoreMockRecorder
}

// MockBlockStoreMockRecorder is the mock recorder for MockBlockStore.
type MockBlockStoreMockRecorder struct {
	mock *MockBlockStore
}

// NewMockBlockStore creates a new mock instance.
func NewMockBlockStore(ctrl *gomock.Controller) *MockBlockStore {
	mock := &MockBlockStore{ctrl: ctrl}
	mock.recorder = &MockBlockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStore) EXPECT() *MockBlockStoreMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockBlockStore) Acquire(lenInBytes int) ([]Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", lenInBytes)
	ret0, _ := ret[0].([]Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockBlockStoreMockRecorder) Acquire(lenInBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockBlockStore)(nil).Acquire), lenInBytes)
}

// DataSize mocks base method.
func (m *MockBlockStore) DataSize() uint16 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSize")
	ret0, _ := ret[0].(uint16)
	return ret0
}

// DataSize indicates an expected call of DataSize.
func (mr *MockBlockStoreMockRecorder) DataSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSize", reflect.TypeOf((*MockBlockStore)(nil).DataSize))
}

// Erase mocks base method.
func (m *MockBlockStore) Erase(idx int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Erase", idx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Erase indicates an expected call of Erase.
func (mr *MockBlockStoreMockRecorder) Erase(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Erase", reflect.TypeOf((*MockBlockStore)(nil).Erase), idx)
}

// From mocks base method.
func (m *MockBlockStore) From(idx int) ([]Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "From", idx)
	ret0, _ := ret[0].([]Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// From indicates an expected call of From.
func (mr *MockBlockStoreMockRecorder) From(idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockBlockStore)(nil).From), idx)
}

// Get mocks base method.
func (m *MockBlockStore) Get(idx int, p *Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", idx, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockBlockStoreMockRecorder) Get(idx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockStore)(nil).Get), idx, p)
}

// Put mocks base method.
func (m *MockBlockStore) Put(arg0 []Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockBlockStoreMockRecorder) Put(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBlockStore)(nil).Put), arg0)
}

// WriteTo mocks base method.
func (m *MockBlockStore) WriteTo(w io.Writer, idx int) ([]Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTo", w, idx)
	ret0, _ := ret[0].([]Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTo indicates an expected call of WriteTo.
func (mr *MockBlockStoreMockRecorder) WriteTo(w, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTo", reflect.TypeOf((*MockBlockStore)(nil).WriteTo), w, idx)
}

// MockRWSC is a mock of RWSC interface.
type MockRWSC struct {
	ctrl     *gomock.Controller
	recorder *MockRWSCMockRecorder
}

// MockRWSCMockRecorder is the mock recorder for MockRWSC.
type MockRWSCMockRecorder struct {
	mock *MockRWSC
}

// NewMockRWSC creates a new mock instance.
func NewMockRWSC(ctrl *gomock.Controller) *MockRWSC {
	mock := &MockRWSC{ctrl: ctrl}
	mock.recorder = &MockRWSCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRWSC) EXPECT() *MockRWSCMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRWSC) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRWSCMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRWSC)(nil).Close))
}

// Read mocks base method.
func (m *MockRWSC) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRWSCMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRWSC)(nil).Read), p)
}

// Seek mocks base method.
func (m *MockRWSC) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockRWSCMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockRWSC)(nil).Seek), offset, whence)
}

// Write mocks base method.
func (m *MockRWSC) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockRWSCMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockRWSC)(nil).Write), p)
}
